load("@gmaven_rules//:defs.bzl", "gmaven_artifact")
load(":nativescript.bzl", "static_binding_generator", "android_metadata_generator")

genrule(
    name = "modified_jsparser.js",
    srcs = ["@tns_android//:build-tools/jsparser/js_parser.js"],
    outs = ["js_parser.js"],
    cmd = "sed 's#$${__dirname}/..#$${process.cwd()}#' $< > $@",
)

sh_binary(
    name = "sbg_sh",
    srcs = ["sbg.sh"],
)

sh_binary(
    name = "mdg_sh",
    srcs = ["mdg.sh"],
)

# assets are the contents of `app` or `src` dir and the contents of node_modules
# TODO: Instead of using files already prepared by NativeScript CLI, we should prepare them here
# NativeScript CLI prepares the files in the following way:
# 1. All files inside `<project dir>/app` or `<project dir>/src` are copied to the `<project dir>/platforms/android/app/src/main/assets/app`
# 2. Each file in this dir that has `<name>.android.<extension>` is renamed to `<name>.<extension>`.
# 3. Each file in this dir that has `<name>.ios.<extension>` is removed.
# 4. All dependencies of the project (everything defined in the dependencies section of the `<project dir>/package.json`) and all of their dependencies and the dependencies of their dependencies,
# i.e. the production dependencies of the project are copied to `<project dir>/platforms/android/app/src/main/assets/app/tns_modules` directory.
# 5. All files in `tns_modules` are checked and if each of them that is called `<name>.android.<extension>` is renamed to `<name>.<extension>`. Each of them called `<name>.ios.<extension>` is removed.
# 6. For each of the NativeScript plugins (i.e. dependency of the project that has "nativescript" key in the package.json), the `<project dir>/platforms/android/app/src/main/assets/app/tns_modules/<plugin name>/platforms` dir is removed.
ASSETS = glob([
        "app/src/main/assets/**",
    ],
    exclude=[
        "app/src/main/assets/**/*.ts",
        "app/src/main/assets/**/*.js.map",
        "app/src/main/assets/**/*.metadata.json",
        "app/src/main/assets/app/tns_modules/rxjs/_esm5/**",
        "app/src/main/assets/app/tns_modules/rxjs/_esm2015/**",
        "app/src/main/assets/app/tns_modules/@angular/*/esm2015/**",
        "app/src/main/assets/app/tns_modules/@angular/*/esm5/**",
        "app/src/main/assets/app/tns_modules/@angular/common/locales/**",
    ],
)

# TODO: Read the required gmaven artifacts from include.gradle files of the plugin and app.gradle file of the project.
DEPS = [
    "@tns_android//:nativescript-optimized-with-inspector",
    "@tns_widgets//:nativescript-widgets",
    gmaven_artifact("com.android.support:multidex:aar:1.0.2"),
    gmaven_artifact("com.android.support:support-annotations:jar:28.0.0"),
    gmaven_artifact("com.android.support:collections:jar:28.0.0"),
    gmaven_artifact("android.arch.core:common:jar:1.1.1"),
    gmaven_artifact("android.arch.core:runtime:aar:1.1.1"),
    gmaven_artifact("android.arch.lifecycle:common:jar:1.1.1"),
    gmaven_artifact("android.arch.lifecycle:livedata-core:aar:1.1.1"),
    gmaven_artifact("android.arch.lifecycle:livedata:aar:1.1.1"),
    gmaven_artifact("android.arch.lifecycle:viewmodel:aar:1.1.1"),
    gmaven_artifact("android.arch.lifecycle:runtime:aar:1.1.1"),
] + [
    gmaven_artifact("com.android.support:%s:aar:28.0.0" % support_lib)
    for support_lib in [
        "design",
        "appcompat-v7",
        "transition",
        "support-v4",
        "support-media-compat",
        "support-fragment",
        "support-core-utils",
        "recyclerview-v7",
        "support-core-ui",
        "animated-vector-drawable",
        "support-vector-drawable",
        "support-compat",
        "interpolator",
        "print",
        "localbroadcastmanager",
        "documentfile",
        "cardview-v7",
        "cursoradapter",
        "versionedparcelable",
        "asynclayoutinflater",
        "swiperefreshlayout",
        "customview",
        "slidingpanelayout",
        "drawerlayout",
        "coordinatorlayout",
        "viewpager",
        "loader"
    ]
]

static_binding_generator(
    name = "static_bindings",
    deps = DEPS + ["@androidsdk//:platforms/android-28/android.jar"],
    assets = ASSETS,
    # NB: assets_dir here needs to include the "/app" segment which doesn't appear
    # on the android_binary rule below
    assets_dir = "app/src/main/assets/app",
)

android_library(
    name = "compiled_static_bindings",
    srcs = [
      "@tns_android//:static_binding_java",
      ":static_bindings",
    ],
    deps = DEPS,
    javacopts = [
        "-XepDisableAllChecks"
    ]
)

# The final binary rule, which builds the APK and sets the application manifest,
# as well as any other resources needed by the application.
# The package for the R class for resources is normally inferred from the
# directory containing the BUILD file, but this BUILD file is not under a java
# directory, so we specify it manually.
android_library(
    name = "android_lib",
    custom_package = "com.google.bazel.example.android",
    srcs = [],
    manifest = "app/src/main/AndroidManifest.xml",
    resource_files = glob(["app/src/main/res/**"]),
    visibility = ["//visibility:public"],
    assets = ASSETS,
    assets_dir = "app/src/main/assets",
    deps = DEPS + [":compiled_static_bindings"],
)

android_metadata_generator(
    name = "generated_metadata",
    resource_jar = ":android_lib_resources.jar",
    deps = DEPS + ["@androidsdk//:platforms/android-28/android.jar"],
)

android_binary(
    name = "android",
    manifest = "app/src/main/AndroidManifest.xml",
    custom_package = "com.google.bazel.example.android",
    assets = ASSETS + [
        ":generated_metadata",
    ],
    assets_dir = "app/src/main/assets",
    srcs = [],
    resource_files = glob(["app/src/main/res/**"]),
    visibility = ["//visibility:public"],
    deps = DEPS + [
        ":compiled_static_bindings",
        ":android_lib",
    ],
)
